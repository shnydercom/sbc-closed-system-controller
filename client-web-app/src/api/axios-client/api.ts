/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface PanTilt
 */
export interface PanTilt {
    /**
     * 
     * @type {number}
     * @memberof PanTilt
     */
    'pan'?: number;
    /**
     * 
     * @type {number}
     * @memberof PanTilt
     */
    'tilt'?: number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Pan By
         * @param {number} relativeangle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panBy: async (relativeangle: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relativeangle' is not null or undefined
            assertParamExists('panBy', 'relativeangle', relativeangle)
            const localVarPath = `/rest/pan-by/{relativeangle}`
                .replace(`{${"relativeangle"}}`, encodeURIComponent(String(relativeangle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pan To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMax: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/pan-to-max`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pan To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMiddle: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/pan-to-middle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pan To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMin: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/pan-to-min`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pantilt Orientation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantiltOrientation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/pantilt-orientation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIndex: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tilt By
         * @param {number} relativeangle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltBy: async (relativeangle: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relativeangle' is not null or undefined
            assertParamExists('tiltBy', 'relativeangle', relativeangle)
            const localVarPath = `/rest/tilt-by/{relativeangle}`
                .replace(`{${"relativeangle"}}`, encodeURIComponent(String(relativeangle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tilt To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMax: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/tilt-to-max`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tilt To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMiddle: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/tilt-to-middle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tilt To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMin: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/tilt-to-min`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Pan By
         * @param {number} relativeangle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panBy(relativeangle: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanTilt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panBy(relativeangle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.panBy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pan To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panToMax(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanTilt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panToMax(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.panToMax']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pan To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panToMiddle(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanTilt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panToMiddle(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.panToMiddle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pan To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panToMin(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanTilt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panToMin(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.panToMin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pantilt Orientation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantiltOrientation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanTilt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantiltOrientation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.pantiltOrientation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIndex(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readIndex(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readIndex']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Tilt By
         * @param {number} relativeangle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tiltBy(relativeangle: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanTilt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tiltBy(relativeangle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tiltBy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Tilt To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tiltToMax(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanTilt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tiltToMax(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tiltToMax']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Tilt To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tiltToMiddle(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanTilt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tiltToMiddle(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tiltToMiddle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Tilt To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tiltToMin(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanTilt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tiltToMin(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tiltToMin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Pan By
         * @param {DefaultApiPanByRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panBy(requestParameters: DefaultApiPanByRequest, options?: RawAxiosRequestConfig): AxiosPromise<PanTilt> {
            return localVarFp.panBy(requestParameters.relativeangle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pan To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMax(options?: RawAxiosRequestConfig): AxiosPromise<PanTilt> {
            return localVarFp.panToMax(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pan To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMiddle(options?: RawAxiosRequestConfig): AxiosPromise<PanTilt> {
            return localVarFp.panToMiddle(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pan To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMin(options?: RawAxiosRequestConfig): AxiosPromise<PanTilt> {
            return localVarFp.panToMin(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pantilt Orientation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantiltOrientation(options?: RawAxiosRequestConfig): AxiosPromise<PanTilt> {
            return localVarFp.pantiltOrientation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIndex(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tilt By
         * @param {DefaultApiTiltByRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltBy(requestParameters: DefaultApiTiltByRequest, options?: RawAxiosRequestConfig): AxiosPromise<PanTilt> {
            return localVarFp.tiltBy(requestParameters.relativeangle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tilt To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMax(options?: RawAxiosRequestConfig): AxiosPromise<PanTilt> {
            return localVarFp.tiltToMax(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tilt To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMiddle(options?: RawAxiosRequestConfig): AxiosPromise<PanTilt> {
            return localVarFp.tiltToMiddle(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tilt To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMin(options?: RawAxiosRequestConfig): AxiosPromise<PanTilt> {
            return localVarFp.tiltToMin(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for panBy operation in DefaultApi.
 * @export
 * @interface DefaultApiPanByRequest
 */
export interface DefaultApiPanByRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiPanBy
     */
    readonly relativeangle: number
}

/**
 * Request parameters for tiltBy operation in DefaultApi.
 * @export
 * @interface DefaultApiTiltByRequest
 */
export interface DefaultApiTiltByRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiTiltBy
     */
    readonly relativeangle: number
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Pan By
     * @param {DefaultApiPanByRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public panBy(requestParameters: DefaultApiPanByRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).panBy(requestParameters.relativeangle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pan To Max
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public panToMax(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).panToMax(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pan To Middle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public panToMiddle(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).panToMiddle(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pan To Min
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public panToMin(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).panToMin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pantilt Orientation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pantiltOrientation(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pantiltOrientation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readIndex(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tilt By
     * @param {DefaultApiTiltByRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tiltBy(requestParameters: DefaultApiTiltByRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tiltBy(requestParameters.relativeangle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tilt To Max
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tiltToMax(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tiltToMax(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tilt To Middle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tiltToMiddle(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tiltToMiddle(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tilt To Min
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tiltToMin(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tiltToMin(options).then((request) => request(this.axios, this.basePath));
    }
}



