/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Pan By
         * @param {number} relativeangle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panByRestPanByRelativeangleGet: async (relativeangle: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relativeangle' is not null or undefined
            assertParamExists('panByRestPanByRelativeangleGet', 'relativeangle', relativeangle)
            const localVarPath = `/rest/pan-by/{relativeangle}`
                .replace(`{${"relativeangle"}}`, encodeURIComponent(String(relativeangle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pan To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMaxRestPanToMaxGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/pan-to-max`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pan To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMiddleRestPanToMiddleGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/pan-to-middle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pan To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMinRestPanToMinGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/pan-to-min`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pantilt Orientation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantiltOrientationRestPantiltOrientationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/pantilt-orientation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIndexGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tilt By
         * @param {number} relativeangle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltByRestTiltByRelativeangleGet: async (relativeangle: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relativeangle' is not null or undefined
            assertParamExists('tiltByRestTiltByRelativeangleGet', 'relativeangle', relativeangle)
            const localVarPath = `/rest/tilt-by/{relativeangle}`
                .replace(`{${"relativeangle"}}`, encodeURIComponent(String(relativeangle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tilt To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMaxRestTiltToMaxGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/tilt-to-max`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tilt To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMiddleRestTiltToMiddleGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/tilt-to-middle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tilt To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMinRestTiltToMinGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/tilt-to-min`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Pan By
         * @param {number} relativeangle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panByRestPanByRelativeangleGet(relativeangle: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panByRestPanByRelativeangleGet(relativeangle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.panByRestPanByRelativeangleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pan To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panToMaxRestPanToMaxGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panToMaxRestPanToMaxGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.panToMaxRestPanToMaxGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pan To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panToMiddleRestPanToMiddleGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panToMiddleRestPanToMiddleGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.panToMiddleRestPanToMiddleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pan To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panToMinRestPanToMinGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panToMinRestPanToMinGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.panToMinRestPanToMinGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Pantilt Orientation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pantiltOrientationRestPantiltOrientationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pantiltOrientationRestPantiltOrientationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.pantiltOrientationRestPantiltOrientationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readIndexGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readIndexGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readIndexGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Tilt By
         * @param {number} relativeangle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tiltByRestTiltByRelativeangleGet(relativeangle: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tiltByRestTiltByRelativeangleGet(relativeangle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tiltByRestTiltByRelativeangleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Tilt To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tiltToMaxRestTiltToMaxGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tiltToMaxRestTiltToMaxGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tiltToMaxRestTiltToMaxGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Tilt To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tiltToMiddleRestTiltToMiddleGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tiltToMiddleRestTiltToMiddleGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tiltToMiddleRestTiltToMiddleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Tilt To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tiltToMinRestTiltToMinGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tiltToMinRestTiltToMinGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tiltToMinRestTiltToMinGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Pan By
         * @param {DefaultApiPanByRestPanByRelativeangleGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panByRestPanByRelativeangleGet(requestParameters: DefaultApiPanByRestPanByRelativeangleGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.panByRestPanByRelativeangleGet(requestParameters.relativeangle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pan To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMaxRestPanToMaxGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.panToMaxRestPanToMaxGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pan To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMiddleRestPanToMiddleGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.panToMiddleRestPanToMiddleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pan To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panToMinRestPanToMinGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.panToMinRestPanToMinGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pantilt Orientation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pantiltOrientationRestPantiltOrientationGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.pantiltOrientationRestPantiltOrientationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readIndexGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readIndexGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tilt By
         * @param {DefaultApiTiltByRestTiltByRelativeangleGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltByRestTiltByRelativeangleGet(requestParameters: DefaultApiTiltByRestTiltByRelativeangleGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.tiltByRestTiltByRelativeangleGet(requestParameters.relativeangle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tilt To Max
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMaxRestTiltToMaxGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.tiltToMaxRestTiltToMaxGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tilt To Middle
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMiddleRestTiltToMiddleGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.tiltToMiddleRestTiltToMiddleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tilt To Min
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiltToMinRestTiltToMinGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.tiltToMinRestTiltToMinGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for panByRestPanByRelativeangleGet operation in DefaultApi.
 * @export
 * @interface DefaultApiPanByRestPanByRelativeangleGetRequest
 */
export interface DefaultApiPanByRestPanByRelativeangleGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiPanByRestPanByRelativeangleGet
     */
    readonly relativeangle: number
}

/**
 * Request parameters for tiltByRestTiltByRelativeangleGet operation in DefaultApi.
 * @export
 * @interface DefaultApiTiltByRestTiltByRelativeangleGetRequest
 */
export interface DefaultApiTiltByRestTiltByRelativeangleGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiTiltByRestTiltByRelativeangleGet
     */
    readonly relativeangle: number
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Pan By
     * @param {DefaultApiPanByRestPanByRelativeangleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public panByRestPanByRelativeangleGet(requestParameters: DefaultApiPanByRestPanByRelativeangleGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).panByRestPanByRelativeangleGet(requestParameters.relativeangle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pan To Max
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public panToMaxRestPanToMaxGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).panToMaxRestPanToMaxGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pan To Middle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public panToMiddleRestPanToMiddleGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).panToMiddleRestPanToMiddleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pan To Min
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public panToMinRestPanToMinGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).panToMinRestPanToMinGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pantilt Orientation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pantiltOrientationRestPantiltOrientationGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pantiltOrientationRestPantiltOrientationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readIndexGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readIndexGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tilt By
     * @param {DefaultApiTiltByRestTiltByRelativeangleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tiltByRestTiltByRelativeangleGet(requestParameters: DefaultApiTiltByRestTiltByRelativeangleGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tiltByRestTiltByRelativeangleGet(requestParameters.relativeangle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tilt To Max
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tiltToMaxRestTiltToMaxGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tiltToMaxRestTiltToMaxGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tilt To Middle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tiltToMiddleRestTiltToMiddleGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tiltToMiddleRestTiltToMiddleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tilt To Min
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tiltToMinRestTiltToMinGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tiltToMinRestTiltToMinGet(options).then((request) => request(this.axios, this.basePath));
    }
}



